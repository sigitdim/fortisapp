'use client';

import React, { useEffect, useMemo, useState } from 'react';

type Row = {
  id: string;
  nama_overhead?: string;
  nama?: string;
  biaya_bulanan?: number;
  biaya?: number;
  biaya_per_periode?: number;
  nilai?: number;
  amount?: number;
  [k: string]: any;
};

const OWNER = process.env.NEXT_PUBLIC_OWNER_ID || '';

function toNum(v: any): number {
  if (typeof v === 'number' && Number.isFinite(v)) return v;
  if (v == null) return 0;
  const s = String(v).replace(/[^\d.,-]/g, '');
  const n = parseFloat(s.replace(/\./g, '').replace(/,/g, '.'));
  return Number.isFinite(n) ? n : 0;
}
function getBiaya(r: Row): number {
  return toNum(
    r.biaya_bulanan ??
      r.biaya ??
      r.biaya_per_periode ??
      r.nilai ??
      r.amount ??
      0
  );
}
function norm(r: Row): Row {
  return {
    ...r,
    nama_overhead: r.nama_overhead ?? r.nama ?? '-',
    biaya_bulanan: getBiaya(r),
  };
}

export default function OverheadTab() {
  const [rows, setRows] = useState<Row[]>([]);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  const [nama, setNama] = useState('');
  const [biayaInp, setBiayaInp] = useState('');

  async function load() {
    setLoading(true);
    try {
      const res = await fetch('/api/setup/overhead', {
        headers: { 'x-owner-id': OWNER },
        cache: 'no-store',
      });
      const j = await res.json();
      const list: Row[] = Array.isArray(j?.data) ? j.data.map(norm) : [];
      setRows(list);
      setErr(null);
    } catch (e: any) {
      setErr(e?.message ?? 'Gagal memuat');
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    load();
  }, []);

  async function createRow() {
    const payload = {
      nama_overhead: nama.trim(),
      biaya_bulanan: toNum(biayaInp),
    };
    if (!payload.nama_overhead) return;
    await fetch('/api/setup/overhead', {
      method: 'POST',
      headers: { 'content-type': 'application/json', 'x-owner-id': OWNER },
      body: JSON.stringify(payload),
    });
    setNama('');
    setBiayaInp('');
    await load();
  }

  async function updateRow(id: string, patch: Partial<Row>) {
    const payload = {
      nama_overhead: (patch.nama_overhead ?? patch.nama ?? '').toString(),
      biaya_bulanan: toNum(
        patch.biaya_bulanan ??
          patch.biaya ??
          patch.biaya_per_periode ??
          patch.nilai ??
          patch.amount ??
          0
      ),
    };
    await fetch(`/api/setup/overhead/${id}`, {
      method: 'PUT',
      headers: { 'content-type': 'application/json', 'x-owner-id': OWNER },
      body: JSON.stringify(payload),
    });
    await load();
  }

  async function deleteRow(id: string) {
    await fetch(`/api/setup/overhead/${id}`, {
      method: 'DELETE',
      headers: { 'x-owner-id': OWNER },
    });
    await load();
  }

  const total = useMemo(
    () => rows.reduce((a, r) => a + getBiaya(r), 0),
    [rows]
  );

  return (
    <section className="space-y-3">
      <div className="flex items-center gap-3">
        <input
          className="border rounded px-4 py-3 w-[40rem]"
          placeholder="Nama Overhead"
          value={nama}
          onChange={(e) => setNama(e.target.value)}
        />
        <input
          className="border rounded px-4 py-3 w-[24rem]"
          placeholder="Biaya per periode"
          value={biayaInp}
          onChange={(e) => setBiayaInp(e.target.value)}
        />
        <button
          className="px-5 py-3 rounded bg-black text-white"
          onClick={createRow}
        >
          Tambah (POST)
        </button>
        <div className="ml-auto">
          <button className="border px-4 py-3 rounded" onClick={load}>
            Refresh
          </button>
        </div>
      </div>

      {loading && <div className="text-slate-500">Memuatâ€¦</div>}
      {err && <div className="text-red-600">Gagal: {err}</div>}

      <table className="w-full border rounded overflow-hidden">
        <thead className="bg-slate-100">
          <tr className="text-left">
            <th className="p-3 w-[60%]">Nama</th>
            <th className="p-3 w-[20%] text-right">Biaya</th>
            <th className="p-3 w-[20%]">Aksi</th>
          </tr>
        </thead>
        <tbody>
          {rows.map((row) => (
            <tr key={row.id} className="border-t">
              <td className="px-3 py-2">
                {row.nama_overhead ?? row.nama ?? '-'}
              </td>
              <td className="px-3 py-2 text-right">
                {getBiaya(row).toLocaleString('id-ID', {
                  style: 'currency',
                  currency: 'IDR',
                  maximumFractionDigits: 0,
                })}
              </td>
              <td className="px-3 py-2">
                <button
                  className="mr-2"
                  onClick={() =>
                    updateRow(row.id, {
                      nama_overhead: row.nama_overhead ?? row.nama,
                      biaya_bulanan: row.biaya_bulanan,
                    })
                  }
                >
                  Edit
                </button>
                <button
                  className="text-red-600"
                  onClick={() => deleteRow(row.id)}
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
          <tr className="border-t bg-slate-50">
            <td className="px-3 py-2 font-semibold">Total</td>
            <td className="px-3 py-2 text-right font-semibold">
              {total.toLocaleString('id-ID', {
                style: 'currency',
                currency: 'IDR',
                maximumFractionDigits: 0,
              })}
            </td>
            <td className="px-3 py-2" />
          </tr>
        </tbody>
      </table>
    </section>
  );
}
