"use client";

import { useEffect, useState } from "react";

interface OverheadItem {
  id: string;
  nama_overhead: string;
  biaya_bulanan: number;
}

const OWNER_ID = process.env.NEXT_PUBLIC_OWNER_ID || "";

export default function OverheadTab() {
  const [items, setItems] = useState<OverheadItem[]>([]);
  const [nama, setNama] = useState("");
  const [biaya, setBiaya] = useState<number>(0);
  const [loading, setLoading] = useState(false);

  async function fetchData() {
    try {
      const res = await fetch("/api/setup/overhead", {
        headers: { "x-owner-id": OWNER_ID },
      });
      const json = await res.json();
      console.log("Fetched overhead:", json);

      const arr = Array.isArray(json?.data) ? json.data : [];
      const mapped = arr.map((r: any) => ({
        id: r.id,
        nama_overhead: r.nama_overhead ?? r.nama ?? "-",
        biaya_bulanan: Number(r.biaya_bulanan ?? r.biaya ?? r.nilai ?? 0) || 0,
      }));

      console.log("Mapped overhead:", mapped);
      setItems(mapped);
    } catch (e) {
      console.error("Fetch overhead failed", e);
      setItems([]);
    }
  }

  async function handleAdd() {
    if (!nama || !biaya) return alert("Isi nama & biaya terlebih dahulu");
    setLoading(true);
    try {
      await fetch("/api/setup/overhead", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-owner-id": OWNER_ID,
        },
        body: JSON.stringify({
          nama_overhead: nama,
          biaya_bulanan: biaya,
        }),
      });
      setNama("");
      setBiaya(0);
      await fetchData();
    } catch (e) {
      console.error(e);
      alert("Gagal menambah overhead");
    } finally {
      setLoading(false);
    }
  }

  async function handleDelete(id: string) {
    if (!confirm("Yakin hapus data ini?")) return;
    await fetch(`/api/setup/overhead/${id}`, {
      method: "DELETE",
      headers: { "x-owner-id": OWNER_ID },
    });
    await fetchData();
  }

  useEffect(() => {
    fetchData();
  }, []);

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold">Overhead</h2>

      <div className="flex gap-3 flex-wrap">
        <input
          value={nama}
          onChange={(e) => setNama(e.target.value)}
          placeholder="Nama Overhead"
          className="border rounded-xl px-4 py-2 flex-1"
        />
        <input
          type="number"
          value={biaya || ""}
          onChange={(e) => setBiaya(Number(e.target.value))}
          placeholder="Biaya per periode"
          className="border rounded-xl px-4 py-2 flex-1"
        />
        <button
          onClick={handleAdd}
          disabled={loading}
          className="bg-black text-white px-6 py-2 rounded-xl disabled:opacity-50"
        >
          {loading ? "Menyimpan..." : "Tambah (POST)"}
        </button>
        <button
          onClick={fetchData}
          className="border px-6 py-2 rounded-xl bg-white"
        >
          Refresh
        </button>
      </div>

      <table className="w-full border rounded-2xl overflow-hidden">
        <thead className="bg-gray-50">
          <tr>
            <th className="text-left px-4 py-3">Nama</th>
            <th className="text-left px-4 py-3">Biaya</th>
            <th className="text-left px-4 py-3">Aksi</th>
          </tr>
        </thead>
        <tbody>
          {items.map((r) => (
            <tr key={r.id} className="border-t">
              <td className="px-4 py-3">{r.nama_overhead}</td>
              <td className="px-4 py-3 text-right">
                {r.biaya_bulanan.toLocaleString("id-ID", {
                  style: "currency",
                  currency: "IDR",
                  maximumFractionDigits: 0,
                })}
              </td>
              <td className="px-4 py-3">
                <button
                  onClick={() => handleDelete(r.id)}
                  className="text-red-600 hover:underline"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
          {!items.length && (
            <tr>
              <td colSpan={3} className="text-center py-6 text-gray-500">
                Tidak ada data overhead.
              </td>
            </tr>
          )}
        </tbody>
      </table>

      <div className="text-xs text-gray-400">
        ✅ OverheadTab aktif — mapping <b>nama_overhead + biaya_bulanan</b>
      </div>
    </div>
  );
}
